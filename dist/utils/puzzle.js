/**
 * utilities about puzzle.
 * @module utils/puzzle
 */
import { useEffect, useRef, useState } from 'react';
import { parseDuration } from './parse';
/**
 * @typedef DurationTimer generated by useDuration hook.
 * @property {string} text - duration text.
 * @property {number} duration - duration (react state) milliseconds count.
 * @property {function} setDuration - the setState function used to update duration.
 * @property {number} intervalId - the id returned from setInterval().
 * @property {Boolean} running - whether the timer is running (react state).
 * @property {function} setRunning - the setState function used to update running,
 */

/**
 *
 * A hook to generate a duration timer.
 * @function
 * @category puzzle
 * @param {number} initial - initial milliseconds
 * @returns {DurationTimer} DurationTimer generated by useDuration hook.
 */

export const useDuration = initial => {
  const [duration, setDuration] = useState(initial);
  const [running, setRunning] = useState(true);
  const intervalId = useRef(0); // eslint-disable-next-line consistent-return

  useEffect(() => {
    if (running) {
      intervalId.current = setInterval(() => {
        setDuration(pre => pre + 100);
      }, 100);
      return () => clearInterval(intervalId.current);
    }
  }, [running]);
  const text = parseDuration(duration);
  return {
    text,
    duration,
    setDuration,
    intervalId: intervalId.current,
    running,
    setRunning
  };
};
export default useDuration;